// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/coord_service.proto

package coord

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VehicleDiscoveryClient is the client API for VehicleDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleDiscoveryClient interface {
	UpdateVehicleList(ctx context.Context, in *UpdateVehicleListRequest, opts ...grpc.CallOption) (*UpdateVehicleListResponse, error)
	GetVehiclesDirections(ctx context.Context, in *GetVehiclesDirectionsRequest, opts ...grpc.CallOption) (*GetVehiclesDirectionsResponse, error)
	RegisterVehicle(ctx context.Context, in *RegisterVehicleRequest, opts ...grpc.CallOption) (*RegisterVehicleResponse, error)
	ListRegisteredVehicles(ctx context.Context, in *ListRegisteredVehiclesRequest, opts ...grpc.CallOption) (*ListRegisteredVehiclesResponse, error)
	AppendPossible(ctx context.Context, in *AppendPossibleRequest, opts ...grpc.CallOption) (*AppendPossibleResponse, error)
	HasLeader(ctx context.Context, in *HasLeaderRequest, opts ...grpc.CallOption) (*HasLeaderResponse, error)
}

type vehicleDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleDiscoveryClient(cc grpc.ClientConnInterface) VehicleDiscoveryClient {
	return &vehicleDiscoveryClient{cc}
}

func (c *vehicleDiscoveryClient) UpdateVehicleList(ctx context.Context, in *UpdateVehicleListRequest, opts ...grpc.CallOption) (*UpdateVehicleListResponse, error) {
	out := new(UpdateVehicleListResponse)
	err := c.cc.Invoke(ctx, "/coord.VehicleDiscovery/UpdateVehicleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleDiscoveryClient) GetVehiclesDirections(ctx context.Context, in *GetVehiclesDirectionsRequest, opts ...grpc.CallOption) (*GetVehiclesDirectionsResponse, error) {
	out := new(GetVehiclesDirectionsResponse)
	err := c.cc.Invoke(ctx, "/coord.VehicleDiscovery/GetVehiclesDirections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleDiscoveryClient) RegisterVehicle(ctx context.Context, in *RegisterVehicleRequest, opts ...grpc.CallOption) (*RegisterVehicleResponse, error) {
	out := new(RegisterVehicleResponse)
	err := c.cc.Invoke(ctx, "/coord.VehicleDiscovery/RegisterVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleDiscoveryClient) ListRegisteredVehicles(ctx context.Context, in *ListRegisteredVehiclesRequest, opts ...grpc.CallOption) (*ListRegisteredVehiclesResponse, error) {
	out := new(ListRegisteredVehiclesResponse)
	err := c.cc.Invoke(ctx, "/coord.VehicleDiscovery/ListRegisteredVehicles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleDiscoveryClient) AppendPossible(ctx context.Context, in *AppendPossibleRequest, opts ...grpc.CallOption) (*AppendPossibleResponse, error) {
	out := new(AppendPossibleResponse)
	err := c.cc.Invoke(ctx, "/coord.VehicleDiscovery/AppendPossible", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleDiscoveryClient) HasLeader(ctx context.Context, in *HasLeaderRequest, opts ...grpc.CallOption) (*HasLeaderResponse, error) {
	out := new(HasLeaderResponse)
	err := c.cc.Invoke(ctx, "/coord.VehicleDiscovery/HasLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleDiscoveryServer is the server API for VehicleDiscovery service.
// All implementations must embed UnimplementedVehicleDiscoveryServer
// for forward compatibility
type VehicleDiscoveryServer interface {
	UpdateVehicleList(context.Context, *UpdateVehicleListRequest) (*UpdateVehicleListResponse, error)
	GetVehiclesDirections(context.Context, *GetVehiclesDirectionsRequest) (*GetVehiclesDirectionsResponse, error)
	RegisterVehicle(context.Context, *RegisterVehicleRequest) (*RegisterVehicleResponse, error)
	ListRegisteredVehicles(context.Context, *ListRegisteredVehiclesRequest) (*ListRegisteredVehiclesResponse, error)
	AppendPossible(context.Context, *AppendPossibleRequest) (*AppendPossibleResponse, error)
	HasLeader(context.Context, *HasLeaderRequest) (*HasLeaderResponse, error)
	mustEmbedUnimplementedVehicleDiscoveryServer()
}

// UnimplementedVehicleDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedVehicleDiscoveryServer struct {
}

func (UnimplementedVehicleDiscoveryServer) UpdateVehicleList(context.Context, *UpdateVehicleListRequest) (*UpdateVehicleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicleList not implemented")
}
func (UnimplementedVehicleDiscoveryServer) GetVehiclesDirections(context.Context, *GetVehiclesDirectionsRequest) (*GetVehiclesDirectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehiclesDirections not implemented")
}
func (UnimplementedVehicleDiscoveryServer) RegisterVehicle(context.Context, *RegisterVehicleRequest) (*RegisterVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVehicle not implemented")
}
func (UnimplementedVehicleDiscoveryServer) ListRegisteredVehicles(context.Context, *ListRegisteredVehiclesRequest) (*ListRegisteredVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredVehicles not implemented")
}
func (UnimplementedVehicleDiscoveryServer) AppendPossible(context.Context, *AppendPossibleRequest) (*AppendPossibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendPossible not implemented")
}
func (UnimplementedVehicleDiscoveryServer) HasLeader(context.Context, *HasLeaderRequest) (*HasLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasLeader not implemented")
}
func (UnimplementedVehicleDiscoveryServer) mustEmbedUnimplementedVehicleDiscoveryServer() {}

// UnsafeVehicleDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleDiscoveryServer will
// result in compilation errors.
type UnsafeVehicleDiscoveryServer interface {
	mustEmbedUnimplementedVehicleDiscoveryServer()
}

func RegisterVehicleDiscoveryServer(s grpc.ServiceRegistrar, srv VehicleDiscoveryServer) {
	s.RegisterService(&VehicleDiscovery_ServiceDesc, srv)
}

func _VehicleDiscovery_UpdateVehicleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleDiscoveryServer).UpdateVehicleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.VehicleDiscovery/UpdateVehicleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleDiscoveryServer).UpdateVehicleList(ctx, req.(*UpdateVehicleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleDiscovery_GetVehiclesDirections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehiclesDirectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleDiscoveryServer).GetVehiclesDirections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.VehicleDiscovery/GetVehiclesDirections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleDiscoveryServer).GetVehiclesDirections(ctx, req.(*GetVehiclesDirectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleDiscovery_RegisterVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleDiscoveryServer).RegisterVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.VehicleDiscovery/RegisterVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleDiscoveryServer).RegisterVehicle(ctx, req.(*RegisterVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleDiscovery_ListRegisteredVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisteredVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleDiscoveryServer).ListRegisteredVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.VehicleDiscovery/ListRegisteredVehicles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleDiscoveryServer).ListRegisteredVehicles(ctx, req.(*ListRegisteredVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleDiscovery_AppendPossible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendPossibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleDiscoveryServer).AppendPossible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.VehicleDiscovery/AppendPossible",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleDiscoveryServer).AppendPossible(ctx, req.(*AppendPossibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleDiscovery_HasLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleDiscoveryServer).HasLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.VehicleDiscovery/HasLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleDiscoveryServer).HasLeader(ctx, req.(*HasLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VehicleDiscovery_ServiceDesc is the grpc.ServiceDesc for VehicleDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coord.VehicleDiscovery",
	HandlerType: (*VehicleDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateVehicleList",
			Handler:    _VehicleDiscovery_UpdateVehicleList_Handler,
		},
		{
			MethodName: "GetVehiclesDirections",
			Handler:    _VehicleDiscovery_GetVehiclesDirections_Handler,
		},
		{
			MethodName: "RegisterVehicle",
			Handler:    _VehicleDiscovery_RegisterVehicle_Handler,
		},
		{
			MethodName: "ListRegisteredVehicles",
			Handler:    _VehicleDiscovery_ListRegisteredVehicles_Handler,
		},
		{
			MethodName: "AppendPossible",
			Handler:    _VehicleDiscovery_AppendPossible_Handler,
		},
		{
			MethodName: "HasLeader",
			Handler:    _VehicleDiscovery_HasLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/coord_service.proto",
}

// CoordinationServiceClient is the client API for CoordinationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinationServiceClient interface {
	RegisterVehicle(ctx context.Context, in *RegisterVehicleRequest, opts ...grpc.CallOption) (*RegisterVehicleResponse, error)
	CheckLeaderHealth(ctx context.Context, in *CheckLeaderHealthRequest, opts ...grpc.CallOption) (*CheckLeaderHealthResponse, error)
	UpdateVehicleStatus(ctx context.Context, in *UpdateVehicleStatusRequest, opts ...grpc.CallOption) (*UpdateVehicleStatusResponse, error)
	GetInstructions(ctx context.Context, in *GetInstructionsRequest, opts ...grpc.CallOption) (*GetInstructionsResponse, error)
	ElectLeader(ctx context.Context, in *ElectLeaderRequest, opts ...grpc.CallOption) (*ElectLeaderResponse, error)
	AppendPossible(ctx context.Context, in *AppendPossibleRequest, opts ...grpc.CallOption) (*AppendPossibleResponse, error)
}

type coordinationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinationServiceClient(cc grpc.ClientConnInterface) CoordinationServiceClient {
	return &coordinationServiceClient{cc}
}

func (c *coordinationServiceClient) RegisterVehicle(ctx context.Context, in *RegisterVehicleRequest, opts ...grpc.CallOption) (*RegisterVehicleResponse, error) {
	out := new(RegisterVehicleResponse)
	err := c.cc.Invoke(ctx, "/coord.CoordinationService/RegisterVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinationServiceClient) CheckLeaderHealth(ctx context.Context, in *CheckLeaderHealthRequest, opts ...grpc.CallOption) (*CheckLeaderHealthResponse, error) {
	out := new(CheckLeaderHealthResponse)
	err := c.cc.Invoke(ctx, "/coord.CoordinationService/CheckLeaderHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinationServiceClient) UpdateVehicleStatus(ctx context.Context, in *UpdateVehicleStatusRequest, opts ...grpc.CallOption) (*UpdateVehicleStatusResponse, error) {
	out := new(UpdateVehicleStatusResponse)
	err := c.cc.Invoke(ctx, "/coord.CoordinationService/UpdateVehicleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinationServiceClient) GetInstructions(ctx context.Context, in *GetInstructionsRequest, opts ...grpc.CallOption) (*GetInstructionsResponse, error) {
	out := new(GetInstructionsResponse)
	err := c.cc.Invoke(ctx, "/coord.CoordinationService/GetInstructions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinationServiceClient) ElectLeader(ctx context.Context, in *ElectLeaderRequest, opts ...grpc.CallOption) (*ElectLeaderResponse, error) {
	out := new(ElectLeaderResponse)
	err := c.cc.Invoke(ctx, "/coord.CoordinationService/ElectLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinationServiceClient) AppendPossible(ctx context.Context, in *AppendPossibleRequest, opts ...grpc.CallOption) (*AppendPossibleResponse, error) {
	out := new(AppendPossibleResponse)
	err := c.cc.Invoke(ctx, "/coord.CoordinationService/AppendPossible", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinationServiceServer is the server API for CoordinationService service.
// All implementations must embed UnimplementedCoordinationServiceServer
// for forward compatibility
type CoordinationServiceServer interface {
	RegisterVehicle(context.Context, *RegisterVehicleRequest) (*RegisterVehicleResponse, error)
	CheckLeaderHealth(context.Context, *CheckLeaderHealthRequest) (*CheckLeaderHealthResponse, error)
	UpdateVehicleStatus(context.Context, *UpdateVehicleStatusRequest) (*UpdateVehicleStatusResponse, error)
	GetInstructions(context.Context, *GetInstructionsRequest) (*GetInstructionsResponse, error)
	ElectLeader(context.Context, *ElectLeaderRequest) (*ElectLeaderResponse, error)
	AppendPossible(context.Context, *AppendPossibleRequest) (*AppendPossibleResponse, error)
	mustEmbedUnimplementedCoordinationServiceServer()
}

// UnimplementedCoordinationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinationServiceServer struct {
}

func (UnimplementedCoordinationServiceServer) RegisterVehicle(context.Context, *RegisterVehicleRequest) (*RegisterVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVehicle not implemented")
}
func (UnimplementedCoordinationServiceServer) CheckLeaderHealth(context.Context, *CheckLeaderHealthRequest) (*CheckLeaderHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLeaderHealth not implemented")
}
func (UnimplementedCoordinationServiceServer) UpdateVehicleStatus(context.Context, *UpdateVehicleStatusRequest) (*UpdateVehicleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicleStatus not implemented")
}
func (UnimplementedCoordinationServiceServer) GetInstructions(context.Context, *GetInstructionsRequest) (*GetInstructionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstructions not implemented")
}
func (UnimplementedCoordinationServiceServer) ElectLeader(context.Context, *ElectLeaderRequest) (*ElectLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectLeader not implemented")
}
func (UnimplementedCoordinationServiceServer) AppendPossible(context.Context, *AppendPossibleRequest) (*AppendPossibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendPossible not implemented")
}
func (UnimplementedCoordinationServiceServer) mustEmbedUnimplementedCoordinationServiceServer() {}

// UnsafeCoordinationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinationServiceServer will
// result in compilation errors.
type UnsafeCoordinationServiceServer interface {
	mustEmbedUnimplementedCoordinationServiceServer()
}

func RegisterCoordinationServiceServer(s grpc.ServiceRegistrar, srv CoordinationServiceServer) {
	s.RegisterService(&CoordinationService_ServiceDesc, srv)
}

func _CoordinationService_RegisterVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServiceServer).RegisterVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinationService/RegisterVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServiceServer).RegisterVehicle(ctx, req.(*RegisterVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinationService_CheckLeaderHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLeaderHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServiceServer).CheckLeaderHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinationService/CheckLeaderHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServiceServer).CheckLeaderHealth(ctx, req.(*CheckLeaderHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinationService_UpdateVehicleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServiceServer).UpdateVehicleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinationService/UpdateVehicleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServiceServer).UpdateVehicleStatus(ctx, req.(*UpdateVehicleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinationService_GetInstructions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstructionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServiceServer).GetInstructions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinationService/GetInstructions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServiceServer).GetInstructions(ctx, req.(*GetInstructionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinationService_ElectLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServiceServer).ElectLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinationService/ElectLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServiceServer).ElectLeader(ctx, req.(*ElectLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinationService_AppendPossible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendPossibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServiceServer).AppendPossible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.CoordinationService/AppendPossible",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServiceServer).AppendPossible(ctx, req.(*AppendPossibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinationService_ServiceDesc is the grpc.ServiceDesc for CoordinationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coord.CoordinationService",
	HandlerType: (*CoordinationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterVehicle",
			Handler:    _CoordinationService_RegisterVehicle_Handler,
		},
		{
			MethodName: "CheckLeaderHealth",
			Handler:    _CoordinationService_CheckLeaderHealth_Handler,
		},
		{
			MethodName: "UpdateVehicleStatus",
			Handler:    _CoordinationService_UpdateVehicleStatus_Handler,
		},
		{
			MethodName: "GetInstructions",
			Handler:    _CoordinationService_GetInstructions_Handler,
		},
		{
			MethodName: "ElectLeader",
			Handler:    _CoordinationService_ElectLeader_Handler,
		},
		{
			MethodName: "AppendPossible",
			Handler:    _CoordinationService_AppendPossible_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/coord_service.proto",
}
